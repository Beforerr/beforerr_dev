[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "beforerr",
    "section": "",
    "text": "Python utils for different packages. Mainly developed by nbdev.",
    "crumbs": [
      "beforerr"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "beforerr",
    "section": "Install",
    "text": "Install\npip install beforerr",
    "crumbs": [
      "beforerr"
    ]
  },
  {
    "objectID": "02_r.html",
    "href": "02_r.html",
    "title": "R utils",
    "section": "",
    "text": "Utils for using R with python in Jupyter\nYou need to install depending package with pip install rpy2 rpy2-arrow\nSee rpy2 for more details and rp2-arrow for arrow support.\nTODO: support polars LazyFrame.\n\n\npy2rpy_polars\n\n py2rpy_polars ()\n\nHelper functions to convert between polars and R dataframes\nHere is how you can use it, remember to load the extension first:\n%load_ext rpy2.ipython\nfrom ids_finder.utils.r import py2rpy_polars\nconv_pl = py2rpy_polars()\nThen you can use it like this to export a dataframe df to R:\n%R -i df -c conv_pl",
    "crumbs": [
      "`R` utils"
    ]
  },
  {
    "objectID": "11_projects.html",
    "href": "11_projects.html",
    "title": "Scientific project utils",
    "section": "",
    "text": "DrWatson.jl\nsacred\n\n\n\nfrom fastcore.test import test_eq\n\n\n\n\n\n datadir ()\n\n\n\n\n\n\n projectdir ()\n\n\n\n\n\n\n savename (c:Dict, prefix:str='', suffix:str='',\n           allowedtypes:Tuple=(&lt;class 'int'&gt;, &lt;class 'float'&gt;, &lt;class\n           'str'&gt;, &lt;class 'bool'&gt;), accesses:List[str]=[],\n           ignores:List[str]=[], digits:int=None, connector:str='_',\n           equals:str='=', expand:List[str]=[], sigdigits:int=3,\n           val2string:Callable=None, sort:bool=True)\n\nCreate a shorthand name based on the parameters in the dictionary c.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nc\nDict\n\nThe input dictionary containing the parameters.\n\n\nprefix\nstr\n\nThe prefix to start the name with.\n\n\nsuffix\nstr\n\nThe suffix to end the name with.\n\n\nallowedtypes\nTuple\n(&lt;class ‘int’&gt;, &lt;class ‘float’&gt;, &lt;class ‘str’&gt;, &lt;class ‘bool’&gt;)\nOnly values of these types are included. (default: (int, float, str, bool))\n\n\naccesses\nList\n[]\nSpecific keys to include in the name.\n\n\nignores\nList\n[]\nSpecific keys to ignore.\n\n\ndigits\nint\nNone\nNumber of decimal digits for rounding floats.\n\n\nconnector\nstr\n_\nString used to connect key-value pairs.\n\n\nequals\nstr\n=\nConnector between key and value.\n\n\nexpand\nList\n[]\nKeys that will be expanded to their nested savename.\n\n\nsigdigits\nint\n3\nNumber of significant digits for rounding floats.\n\n\nval2string\nCallable\nNone\nFunction to convert values to strings.\n\n\nsort\nbool\nTrue\nWhether to sort the keys alphabetically.\n\n\nReturns\nstr\n\nThe generated shorthand name.\n\n\n\n\n# Examples\nd = {\"a\": 0.153456453, \"b\": 5, \"mode\": \"double\"}\ntest_eq(savename(d), \"a=0.153_b=5_mode=double\")\ntest_eq(savename(d, digits=4), \"a=0.1535_b=5_mode=double\")\ntest_eq(savename(d, prefix=\"n\"), \"n_a=0.153_b=5_mode=double\")\ntest_eq(savename(d, suffix=\"n\"), \"a=0.153_b=5_mode=double.n\")\ntest_eq(savename(d, prefix=\"n\", suffix=\"n\", connector=\"-\"), \"n-a=0.153-b=5-mode=double.n\")\ntest_eq(savename(d, allowedtypes=(str,)), \"mode=double\")\ntest_eq(savename(d, connector=\" | \", equals=\" = \"), \"a = 0.153 | b = 5 | mode = double\")\n\nrick = {\"never\": \"gonna\", \"give\": \"you\", \"up\": \"!\"}\ntest_eq(savename(rick), \"give=you_never=gonna_up=!\")\ntest_eq(savename(rick, ignores=[\"up\"]), \"give=you_never=gonna\")\n\n\n\n\n\n\n setup_run_dir (c:Dict, base_dir:Callable=&lt;function datadir&gt;,\n                change_dir:bool=True, **kwargs)\n\nCreate a run directory based on the parameters in the dictionary c.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nc\nDict\n\nThe dictionary containing the parameters.\n\n\nbase_dir\nCallable\ndatadir\nThe base directory to create the run directory in.\n\n\nchange_dir\nbool\nTrue\n\n\n\nkwargs\n\n\n\n\n\nReturns\nPath\n\nThe run directory.\n\n\n\n\n\n\n\n\n safesave (filepath:pathlib.Path, data, save_func:Callable)\n\n\n# Example usage\ndata = \"Some data to be savedsss\"\nsafesave(\"test.txt\", data)",
    "crumbs": [
      "Scientific project utils"
    ]
  },
  {
    "objectID": "11_projects.html#inspirations",
    "href": "11_projects.html#inspirations",
    "title": "Scientific project utils",
    "section": "",
    "text": "DrWatson.jl\nsacred\n\n\n\nfrom fastcore.test import test_eq\n\n\n\n\n\n datadir ()\n\n\n\n\n\n\n projectdir ()\n\n\n\n\n\n\n savename (c:Dict, prefix:str='', suffix:str='',\n           allowedtypes:Tuple=(&lt;class 'int'&gt;, &lt;class 'float'&gt;, &lt;class\n           'str'&gt;, &lt;class 'bool'&gt;), accesses:List[str]=[],\n           ignores:List[str]=[], digits:int=None, connector:str='_',\n           equals:str='=', expand:List[str]=[], sigdigits:int=3,\n           val2string:Callable=None, sort:bool=True)\n\nCreate a shorthand name based on the parameters in the dictionary c.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nc\nDict\n\nThe input dictionary containing the parameters.\n\n\nprefix\nstr\n\nThe prefix to start the name with.\n\n\nsuffix\nstr\n\nThe suffix to end the name with.\n\n\nallowedtypes\nTuple\n(&lt;class ‘int’&gt;, &lt;class ‘float’&gt;, &lt;class ‘str’&gt;, &lt;class ‘bool’&gt;)\nOnly values of these types are included. (default: (int, float, str, bool))\n\n\naccesses\nList\n[]\nSpecific keys to include in the name.\n\n\nignores\nList\n[]\nSpecific keys to ignore.\n\n\ndigits\nint\nNone\nNumber of decimal digits for rounding floats.\n\n\nconnector\nstr\n_\nString used to connect key-value pairs.\n\n\nequals\nstr\n=\nConnector between key and value.\n\n\nexpand\nList\n[]\nKeys that will be expanded to their nested savename.\n\n\nsigdigits\nint\n3\nNumber of significant digits for rounding floats.\n\n\nval2string\nCallable\nNone\nFunction to convert values to strings.\n\n\nsort\nbool\nTrue\nWhether to sort the keys alphabetically.\n\n\nReturns\nstr\n\nThe generated shorthand name.\n\n\n\n\n# Examples\nd = {\"a\": 0.153456453, \"b\": 5, \"mode\": \"double\"}\ntest_eq(savename(d), \"a=0.153_b=5_mode=double\")\ntest_eq(savename(d, digits=4), \"a=0.1535_b=5_mode=double\")\ntest_eq(savename(d, prefix=\"n\"), \"n_a=0.153_b=5_mode=double\")\ntest_eq(savename(d, suffix=\"n\"), \"a=0.153_b=5_mode=double.n\")\ntest_eq(savename(d, prefix=\"n\", suffix=\"n\", connector=\"-\"), \"n-a=0.153-b=5-mode=double.n\")\ntest_eq(savename(d, allowedtypes=(str,)), \"mode=double\")\ntest_eq(savename(d, connector=\" | \", equals=\" = \"), \"a = 0.153 | b = 5 | mode = double\")\n\nrick = {\"never\": \"gonna\", \"give\": \"you\", \"up\": \"!\"}\ntest_eq(savename(rick), \"give=you_never=gonna_up=!\")\ntest_eq(savename(rick, ignores=[\"up\"]), \"give=you_never=gonna\")\n\n\n\n\n\n\n setup_run_dir (c:Dict, base_dir:Callable=&lt;function datadir&gt;,\n                change_dir:bool=True, **kwargs)\n\nCreate a run directory based on the parameters in the dictionary c.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nc\nDict\n\nThe dictionary containing the parameters.\n\n\nbase_dir\nCallable\ndatadir\nThe base directory to create the run directory in.\n\n\nchange_dir\nbool\nTrue\n\n\n\nkwargs\n\n\n\n\n\nReturns\nPath\n\nThe run directory.\n\n\n\n\n\n\n\n\n safesave (filepath:pathlib.Path, data, save_func:Callable)\n\n\n# Example usage\ndata = \"Some data to be savedsss\"\nsafesave(\"test.txt\", data)",
    "crumbs": [
      "Scientific project utils"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "ifnone\n\n ifnone (a, b)\n\nb if a is None else a",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "03_matplotlib.html",
    "href": "03_matplotlib.html",
    "title": "Utils for Matplotlib",
    "section": "",
    "text": "unify_axes_fontsize\n\n unify_axes_fontsize (axes:matplotlib.axes._axes.Axes,\n                      fontsize:str|float='medium')\n\nSet the fontsize of all text elements in a matplotlib axis to the same value.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\naxes\nAxes\n\na single axis or a list of axes\n\n\nfontsize\nstr | float\nmedium\nstring values denote sizes relative to the default font size",
    "crumbs": [
      "Utils for Matplotlib"
    ]
  },
  {
    "objectID": "10_polars.html#io",
    "href": "10_polars.html#io",
    "title": "Utils for Polars",
    "section": "IO",
    "text": "IO\n\n\nconvert_to_pd_dataframe\n\n convert_to_pd_dataframe\n                          (df:polars.dataframe.frame.DataFrame|polars.lazy\n                          frame.frame.LazyFrame)\n\nConvert a Polars DataFrame or LazyFrame into a pandas-like DataFrame.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ndf\npolars.dataframe.frame.DataFrame | polars.lazyframe.frame.LazyFrame\noriginal DataFrame or LazyFrame",
    "crumbs": [
      "Utils for Polars"
    ]
  },
  {
    "objectID": "10_polars.html#functions",
    "href": "10_polars.html#functions",
    "title": "Utils for Polars",
    "section": "Functions",
    "text": "Functions\n\n\nsort\n\n sort (df:polars.dataframe.frame.DataFrame, col='time')\n\n\n\n\npl_norm\n\n pl_norm (columns, *more_columns)\n\n*Computes the square root of the sum of squares for the given columns.\nArgs: *columns (str): Names of the columns.\nReturns: pl.Expr: Expression representing the square root of the sum of squares.*\n\n\n\ndecompose_vector\n\n decompose_vector (df:polars.lazyframe.frame.LazyFrame, vector_col,\n                   name=None)",
    "crumbs": [
      "Utils for Polars"
    ]
  },
  {
    "objectID": "01_basics.html",
    "href": "01_basics.html",
    "title": "Basic functionality",
    "section": "",
    "text": "pmap\n\n pmap (func, *args, **kwargs)\n\nmap with partial",
    "crumbs": [
      "Basic functionality"
    ]
  }
]