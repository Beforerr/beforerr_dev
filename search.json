[
  {
    "objectID": "02_projects.html",
    "href": "02_projects.html",
    "title": "Scientific project utils",
    "section": "",
    "text": "DrWatson.jl\nsacred\n\n\n\nfrom fastcore.test import test_eq",
    "crumbs": [
      "Scientific project utils"
    ]
  },
  {
    "objectID": "02_projects.html#inspirations",
    "href": "02_projects.html#inspirations",
    "title": "Scientific project utils",
    "section": "",
    "text": "DrWatson.jl\nsacred\n\n\n\nfrom fastcore.test import test_eq",
    "crumbs": [
      "Scientific project utils"
    ]
  },
  {
    "objectID": "02_projects.html#naming-tools",
    "href": "02_projects.html#naming-tools",
    "title": "Scientific project utils",
    "section": "Naming Tools",
    "text": "Naming Tools\n\n\nsavename\n\n savename (c:dict, prefix:str='', suffix:str='',\n           allowedtypes:Tuple=(&lt;class 'int'&gt;, &lt;class 'float'&gt;, &lt;class\n           'str'&gt;, &lt;class 'bool'&gt;, &lt;class 'datetime.timedelta'&gt;),\n           accesses:list[str]=[], ignores:list[str]=[], digits:int=None,\n           connector:str='_', equals:str='=', expand:list[str]=[],\n           sigdigits:int=3, val2string:Callable=None, sort:bool=True)\n\nCreate a shorthand name based on the parameters in the dictionary c.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nc\ndict\n\nThe input dictionary containing the parameters.\n\n\nprefix\nstr\n\nThe prefix to start the name with.\n\n\nsuffix\nstr\n\nThe suffix to end the name with.\n\n\nallowedtypes\nTuple\n(&lt;class ‘int’&gt;, &lt;class ‘float’&gt;, &lt;class ‘str’&gt;, &lt;class ‘bool’&gt;, &lt;class ‘datetime.timedelta’&gt;)\nOnly values of these types are included. (default: (int, float, str, bool))\n\n\naccesses\nlist\n[]\nSpecific keys to include in the name.\n\n\nignores\nlist\n[]\nSpecific keys to ignore.\n\n\ndigits\nint\nNone\nNumber of decimal digits for rounding floats.\n\n\nconnector\nstr\n_\nString used to connect key-value pairs.\n\n\nequals\nstr\n=\nConnector between key and value.\n\n\nexpand\nlist\n[]\nKeys that will be expanded to their nested savename.\n\n\nsigdigits\nint\n3\nNumber of significant digits for rounding floats.\n\n\nval2string\nCallable\nNone\nFunction to convert values to strings.\n\n\nsort\nbool\nTrue\nWhether to sort the keys alphabetically.\n\n\nReturns\nstr\n\nThe generated shorthand name.\n\n\n\n\n# Examples\nd = {\"a\": 0.153456453, \"b\": 5, \"mode\": \"double\"}\ntest_eq(savename(d), \"a=0.153_b=5_mode=double\")\ntest_eq(savename(d, digits=4), \"a=0.1535_b=5_mode=double\")\ntest_eq(savename(d, prefix=\"n\"), \"n_a=0.153_b=5_mode=double\")\ntest_eq(savename(d, suffix=\"n\"), \"a=0.153_b=5_mode=double.n\")\ntest_eq(\n    savename(d, prefix=\"n\", suffix=\"n\", connector=\"-\"), \"n-a=0.153-b=5-mode=double.n\"\n)\ntest_eq(savename(d, allowedtypes=(str,)), \"mode=double\")\ntest_eq(savename(d, connector=\" | \", equals=\" = \"), \"a = 0.153 | b = 5 | mode = double\")\n\nrick = {\"never\": \"gonna\", \"give\": \"you\", \"up\": \"!\"}\ntest_eq(savename(rick), \"give=you_never=gonna_up=!\")\ntest_eq(savename(rick, ignores=[\"up\"]), \"give=you_never=gonna\")\n\n\n\n\nappend_prefix_suffix\n\n append_prefix_suffix (name:str, prefix:str, suffix:str)",
    "crumbs": [
      "Scientific project utils"
    ]
  },
  {
    "objectID": "02_projects.html#directory-tools",
    "href": "02_projects.html#directory-tools",
    "title": "Scientific project utils",
    "section": "Directory tools",
    "text": "Directory tools\n\n\nplotsdir\n\n plotsdir (subdir='figures')\n\n\n\n\ndatadir\n\n datadir (subdir='data')\n\n\n\n\nprojectdir\n\n projectdir ()\n\n\n\n\nsetup_run_dir\n\n setup_run_dir (c:dict, base_dir:Callable=&lt;function datadir&gt;,\n                change_dir:bool=True, **kwargs)\n\nCreate a run directory based on the parameters in the dictionary c.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nc\ndict\n\nThe dictionary containing the parameters.\n\n\nbase_dir\nCallable\ndatadir\nThe base directory to create the run directory in.\n\n\nchange_dir\nbool\nTrue\n\n\n\nkwargs\n\n\n\n\n\nReturns\nPath\n\nThe run directory.",
    "crumbs": [
      "Scientific project utils"
    ]
  },
  {
    "objectID": "02_projects.html#saving-tools",
    "href": "02_projects.html#saving-tools",
    "title": "Scientific project utils",
    "section": "Saving Tools",
    "text": "Saving Tools\n\n\nsafesave\n\n safesave (file:str, data, save_func:Callable=functools.partial(&lt;function\n           action at 0x7f433968bb00&gt;, 'save'))\n\n\n\nProduce or Load\nProduce or Load - DrWatson.jl\n\n\n\nproduce_or_load\n\n produce_or_load (f:Callable, config:dict={}, path:pathlib.Path=Path('/hom\n                  e/runner/work/beforerr_dev/beforerr_dev/data'),\n                  suffix:str='pickle', prefix:str=None, force:bool=False,\n                  verbose:bool=True, action_kwargs:dict={},\n                  filename:Union[Callable,str,NoneType]=None, **kwargs)\n\n\n\n\nproduce_or_load_file\n\n produce_or_load_file (f:Callable, config:dict, file:pathlib.Path,\n                       force:bool=False, verbose:bool=True,\n                       load_func:Callable=functools.partial(&lt;function\n                       action at 0x7f433968bb00&gt;, 'load'),\n                       save_func:Callable=functools.partial(&lt;function\n                       action at 0x7f433968bb00&gt;, 'save'), **kwargs)",
    "crumbs": [
      "Scientific project utils"
    ]
  },
  {
    "objectID": "12_r.html",
    "href": "12_r.html",
    "title": "R utils",
    "section": "",
    "text": "Utils for using R with python in Jupyter\nYou need to install depending package with pip install rpy2 rpy2-arrow\nSee rpy2 for more details and rp2-arrow for arrow support.\nTODO: support polars LazyFrame.\n\n\npy2rpy_polars\n\n py2rpy_polars ()\n\nHelper functions to convert between polars and R dataframes\nHere is how you can use it, remember to load the extension first:\n%load_ext rpy2.ipython\nfrom ids_finder.utils.r import py2rpy_polars\nconv_pl = py2rpy_polars()\nThen you can use it like this to export a dataframe df to R:\n%R -i df -c conv_pl",
    "crumbs": [
      "`R` utils"
    ]
  },
  {
    "objectID": "03_io.html",
    "href": "03_io.html",
    "title": "IO utils",
    "section": "",
    "text": "FileIO.jl\n\nFileIO.jl/src/loadsave.jl at master · JuliaIO/FileIO.jl\n\nIntake\n\nintake/intake/readers/datatypes.py at master · intake/intake\nEasy loading and saving · Issue #819 · intake/intake\n\n\nReference:\n\n7. Input and Output — Python documentation\n\n\n\n\n\n\n action (func, file:pathlib.Path, *args, **kwargs)",
    "crumbs": [
      "IO utils"
    ]
  },
  {
    "objectID": "03_io.html#inspirations",
    "href": "03_io.html#inspirations",
    "title": "IO utils",
    "section": "",
    "text": "FileIO.jl\n\nFileIO.jl/src/loadsave.jl at master · JuliaIO/FileIO.jl\n\nIntake\n\nintake/intake/readers/datatypes.py at master · intake/intake\nEasy loading and saving · Issue #819 · intake/intake\n\n\nReference:\n\n7. Input and Output — Python documentation\n\n\n\n\n\n\n action (func, file:pathlib.Path, *args, **kwargs)",
    "crumbs": [
      "IO utils"
    ]
  },
  {
    "objectID": "03_io.html#test",
    "href": "03_io.html#test",
    "title": "IO utils",
    "section": "Test",
    "text": "Test\n\nfp = \"test/test.json\"\ndata = load(fp)",
    "crumbs": [
      "IO utils"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "ifnone\n\n ifnone (a, b)\n\nb if a is None else a",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "01_basics.html",
    "href": "01_basics.html",
    "title": "Basic functionality",
    "section": "",
    "text": "pmap\n\n pmap (func, *args, **kwargs)\n\nmap with partial",
    "crumbs": [
      "Basic functionality"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "beforerr",
    "section": "",
    "text": "Python utils for different packages",
    "crumbs": [
      "beforerr"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "beforerr",
    "section": "Install",
    "text": "Install\npip install beforerr",
    "crumbs": [
      "beforerr"
    ]
  },
  {
    "objectID": "10_polars.html",
    "href": "10_polars.html",
    "title": "Utils for Polars",
    "section": "",
    "text": "convert_to_pd_dataframe\n                          (df:polars.dataframe.frame.DataFrame|polars.lazy\n                          frame.frame.LazyFrame)\n\nConvert a Polars DataFrame or LazyFrame into a pandas-like DataFrame.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ndf\npolars.dataframe.frame.DataFrame | polars.lazyframe.frame.LazyFrame\noriginal DataFrame or LazyFrame",
    "crumbs": [
      "Utils for Polars"
    ]
  },
  {
    "objectID": "10_polars.html#io",
    "href": "10_polars.html#io",
    "title": "Utils for Polars",
    "section": "",
    "text": "convert_to_pd_dataframe\n                          (df:polars.dataframe.frame.DataFrame|polars.lazy\n                          frame.frame.LazyFrame)\n\nConvert a Polars DataFrame or LazyFrame into a pandas-like DataFrame.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ndf\npolars.dataframe.frame.DataFrame | polars.lazyframe.frame.LazyFrame\noriginal DataFrame or LazyFrame",
    "crumbs": [
      "Utils for Polars"
    ]
  },
  {
    "objectID": "10_polars.html#functions",
    "href": "10_polars.html#functions",
    "title": "Utils for Polars",
    "section": "Functions",
    "text": "Functions\n\n\nsort\n\n sort (df:polars.dataframe.frame.DataFrame, col='time')\n\n\ndef test_expand_collections():\n    assert expand_collections([1, 2], 3, 4) == [1, 2, 3, 4]\n    assert expand_collections([1, 2], [3, 4]) == [1, 2, 3, 4]\n    assert expand_collections([1, 2], \"3\", 4) == [1, 2, \"3\", 4]\n\n\n\n\npl_norm\n\n pl_norm (*columns:str|polars.expr.expr.Expr)\n\n*Computes the square root of the sum of squares for the given columns.\nArgs: columns (str): Names of the columns.\nReturns: pl.Expr: Expression representing the square root of the sum of squares.*\n\n\n\ndecompose_vector\n\n decompose_vector (df:polars.dataframe.frame.DataFrame, vector_col,\n                   name=None, suffixes:list=['_x', '_y', '_z'])\n\n*Decompose a vector column in a DataFrame into separate columns for each component with custom suffixes.\nParameters: - df (pl.DataFrame): The input DataFrame. - vector_col (str): The name of the vector column to decompose. - name (str, optional): Base name for the decomposed columns. If None, uses vector_col as the base name. - suffixes (list, optional): A list of suffixes to use for the decomposed columns. If None or not enough suffixes are provided, defaults to ’_0’, ’_1’, etc.\nReturns: - pl.DataFrame: A DataFrame with the original vector column decomposed into separate columns.*\n\n\n\nformat_time\n\n format_time\n              (df:polars.dataframe.frame.DataFrame|polars.lazyframe.frame.\n              LazyFrame, time_unit='ns')",
    "crumbs": [
      "Utils for Polars"
    ]
  },
  {
    "objectID": "10_polars.html#fast-filter-for-a-list-of-predicates",
    "href": "10_polars.html#fast-filter-for-a-list-of-predicates",
    "title": "Utils for Polars",
    "section": "Fast filter for a list of predicates",
    "text": "Fast filter for a list of predicates\nUse a list of filters within polars - Stack Overflow\n\n\nfilter_df_by_ranges\n\n filter_df_by_ranges (data:polars.dataframe.frame.DataFrame, starts:list,\n                      stops:list, col='time')\n\nFilter a DataFrame from ranges\n\n\n\nfilter_series_by_ranges_i\n\n filter_series_by_ranges_i (data:polars.series.series.Series, starts:list,\n                            stops:list)\n\n\ndef sample_data(n=10):\n    return pl.DataFrame(\n        {\n            \"time\": pl.arange(n, eager=True),\n        }\n    )\n\n\ndef test_filter_df_by_intervals(sample_data):\n    filtered_data = filter_df_by_ranges(sample_data, [1, 5], [3, 7])\n    assert len(filtered_data) == 6\n    assert filtered_data[\"time\"].min() == 1\n    assert filtered_data[\"time\"].max() == 7\n\n\ndef test_filter_df_by_intervals_no_match(sample_data):\n    filtered_data = filter_df_by_ranges(sample_data, [100, 200], [300, 400])\n    assert len(filtered_data) == 0\n\n\ndef test_filter_df_by_intervals_edge_case(sample_data):\n    filtered_data = filter_df_by_ranges(sample_data, [1, 1], [1, 1])\n    assert len(filtered_data) == 1\n\n\n_sample_data = sample_data()\ntest_filter_df_by_intervals(_sample_data)\ntest_filter_df_by_intervals_no_match(_sample_data)\ntest_filter_df_by_intervals_edge_case(_sample_data)\n\n\nn = 1000000\ndata = sample_data(n)\n\nstarts = list(range(0, n - 200, 100))\nstops = list(range(100, n - 100, 100))\n\nCPU times: user 38.1 ms, sys: 8.89 ms, total: 47 ms\nWall time: 45.6 ms\n\n\n\nshape: (999_801, 1)\n\n\n\ntime\n\n\ni64\n\n\n\n\n0\n\n\n1\n\n\n2\n\n\n3\n\n\n4\n\n\n…\n\n\n999796\n\n\n999797\n\n\n999798\n\n\n999799\n\n\n999800",
    "crumbs": [
      "Utils for Polars"
    ]
  },
  {
    "objectID": "matplotlib.html#saving",
    "href": "matplotlib.html#saving",
    "title": "Utils for Matplotlib",
    "section": "Saving",
    "text": "Saving\n\n\neasy_save\n\n easy_save (name:str, fig:matplotlib.figure.Figure=None, formats=['svg'],\n            dir=Path('/home/runner/work/beforerr_dev/beforerr_dev/figures'\n            ), **kwargs)",
    "crumbs": [
      "Utils for Matplotlib"
    ]
  },
  {
    "objectID": "matplotlib.html#axes",
    "href": "matplotlib.html#axes",
    "title": "Utils for Matplotlib",
    "section": "Axes",
    "text": "Axes\n\n\nunify_axes_fontsize\n\n unify_axes_fontsize (obj:matplotlib.figure.Figure|matplotlib.axes._axes.A\n                      xes|list[matplotlib.axes._axes.Axes]|None=None,\n                      fontsize:str|float='medium')\n\nSet the fontsize of all text elements in a matplotlib axis to the same value.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nobj\nmatplotlib.figure.Figure | matplotlib.axes._axes.Axes | list[matplotlib.axes._axes.Axes] | None\nNone\na single axis or a list of axes\n\n\nfontsize\nstr | float\nmedium\n\n\n\n\n\n\n\ncreate_legends\n\n create_legends (obj:matplotlib.figure.Figure|matplotlib.axes._axes.Axes|l\n                 ist[matplotlib.axes._axes.Axes]|None=None, **kwargs)\n\n\n\n\nhide_ylabels\n\n hide_ylabels (obj:matplotlib.figure.Figure|matplotlib.axes._axes.Axes|lis\n               t[matplotlib.axes._axes.Axes]|None=None)\n\n\n\n\nhide_xlabels\n\n hide_xlabels (obj:matplotlib.figure.Figure|matplotlib.axes._axes.Axes|lis\n               t[matplotlib.axes._axes.Axes]|None=None)\n\n\n\nLines\n\n\n\nset_linewidth\n\n set_linewidth (w, obj:matplotlib.figure.Figure|matplotlib.axes._axes.Axes\n                |list[matplotlib.axes._axes.Axes]|None=None)",
    "crumbs": [
      "Utils for Matplotlib"
    ]
  },
  {
    "objectID": "matplotlib.html#legends",
    "href": "matplotlib.html#legends",
    "title": "Utils for Matplotlib",
    "section": "Legends",
    "text": "Legends\n\n\nhide_legend_lines\n\n hide_legend_lines (obj:matplotlib.figure.Figure|matplotlib.axes._axes.Axe\n                    s|list[matplotlib.axes._axes.Axes]|None=None)\n\nHide legend lines on all axes.\n\n\n\nhide_legends\n\n hide_legends (obj:matplotlib.figure.Figure|matplotlib.axes._axes.Axes|lis\n               t[matplotlib.axes._axes.Axes]|None=None)\n\nHide legends on all axes.\n\n\n\nsync_legend_colors\n\n sync_legend_colors (obj:matplotlib.figure.Figure|matplotlib.axes._axes.Ax\n                     es|list[matplotlib.axes._axes.Axes]|None=None)\n\nSynchronize legend text colors with their corresponding line colors.",
    "crumbs": [
      "Utils for Matplotlib"
    ]
  },
  {
    "objectID": "matplotlib.html#pipelines",
    "href": "matplotlib.html#pipelines",
    "title": "Utils for Matplotlib",
    "section": "Pipelines",
    "text": "Pipelines\n\n\nupdate_rcParams\n\n update_rcParams (plot_opts:__main__.PlotOpts)\n\n\n\n\nprocess_figure\n\n process_figure (obj, plot_opts:pydantic.main.BaseModel, **kwargs)\n\n\n\n\nPlotOpts\n\n PlotOpts (sync_legend_colors:bool=False, hide_legends:bool=False,\n           hide_legend_lines:bool=False, hide_xlabels:bool=False,\n           hide_ylabels:bool=False)\n\nOptions to apply to a matplotlib object.",
    "crumbs": [
      "Utils for Matplotlib"
    ]
  }
]